<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-02-09T10:45:15-06:00</updated><id>http://localhost:4000/</id><title type="html">David Okun</title><subtitle>Constantly Trying New Stuff For You</subtitle><entry><title type="html">10 Things About Going To DevRel and Back</title><link href="http://localhost:4000/2020/02/11/10-things-about-going-to-devrel-and-back/" rel="alternate" type="text/html" title="10 Things About Going To DevRel and Back" /><published>2020-02-11T06:00:00-06:00</published><updated>2020-02-11T06:00:00-06:00</updated><id>http://localhost:4000/2020/02/11/10-things-about-going-to-devrel-and-back</id><content type="html" xml:base="http://localhost:4000/2020/02/11/10-things-about-going-to-devrel-and-back/">&lt;p&gt;My interview process with IBM, from start to finish, lasted 3 months. I originally interviewed for an engineering position on the Swift team at IBM, and I would have focused on Kitura. The team was, unfortunately, unable to find room for me, and I was told to call back in 1 - 6 months.&lt;/p&gt;

&lt;p&gt;After 3 more weeks, I got a call asking if I would be interested in joining the Strongloop team advocating for Loopback, which is a Node.js server-generation framework, but as an evangelist for Swift developers. I mean…sure. I can’t say I didn’t hesitate before taking the role, and it was for two reasons.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I’d played with Node, but not to the point that I was about to go talk to developers about how awesome it was as though I’d been using it forever.&lt;/li&gt;
  &lt;li&gt;What even is a Developer Evangelist?&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-focus-on-projects-and-examples-not-tweets&quot;&gt;1. Focus on Projects and Examples, not Tweets&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-pick-an-airline-and-a-hotel-chain&quot;&gt;2. Pick an Airline And A Hotel Chain&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-get-to-know-the-developers-on-the-project-you-care-most-about&quot;&gt;3. Get To Know The Developers On The Project You Care Most About&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-get-to-know-the-developers-that-use-projects-that-compete-with-your-favorite-project&quot;&gt;4. Get To Know The Developers That Use Projects That Compete With Your Favorite Project&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-buy-a-standing-desk&quot;&gt;5. Buy A Standing Desk&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-invest-in-your-personal-health&quot;&gt;6. Invest In Your Personal Health&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-start-a-meetup-or-be-a-regular-at-one&quot;&gt;7. Start A Meetup Or Be A Regular At One&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;8-make-a-wiki-for-your-future-teammates&quot;&gt;8. Make A Wiki For Your Future Teammates&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;9-try-side-projects-that-scare-you&quot;&gt;9. Try Side Projects That Scare You&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;10-accept-that-projects-both-change-and-disappear&quot;&gt;10. Accept That Projects Both Change And Disappear&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What Past-Me Did:&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;What Future-Me Would Do:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;With that, I’d like to announce that I am leaving my position as team lead for the Client Developer Advocacy team at IBM.&lt;/p&gt;

&lt;p&gt;Starting on the 18th of February, I’ll be the new iOS Technical Director of Charles Schwab in Austin, TX!&lt;/p&gt;</content><author><name>David Okun</name></author><summary type="html">My interview process with IBM, from start to finish, lasted 3 months. I originally interviewed for an engineering position on the Swift team at IBM, and I would have focused on Kitura. The team was, unfortunately, unable to find room for me, and I was told to call back in 1 - 6 months.</summary></entry><entry><title type="html">When Someone Famous Dies</title><link href="http://localhost:4000/2020/01/27/when-someone-famous-dies/" rel="alternate" type="text/html" title="When Someone Famous Dies" /><published>2020-01-27T06:00:00-06:00</published><updated>2020-01-27T06:00:00-06:00</updated><id>http://localhost:4000/2020/01/27/when-someone-famous-dies</id><content type="html" xml:base="http://localhost:4000/2020/01/27/when-someone-famous-dies/">&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Let people express their grief on social media. It’s cathartic for a lot of folks and one of the good things about this thing. Performative mourning is different, but people reaching out to each other - that’s not bad, that’s good. Feel free to ignore me. I’m for more kindness.&lt;/p&gt;&amp;mdash; Jake Fogelnest (@jakefogelnest) &lt;a href=&quot;https://twitter.com/jakefogelnest/status/1221550245999304704?ref_src=twsrc%5Etfw&quot;&gt;January 26, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Everyone’s got a take on Kobe. Here’s mine.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I always was, and likely always be, terrible at basketball. I grew up in Houston, Texas idolizing Hakeem Olajuwon and watching him win in 1994 and 1995 the first two years I ever watched Basketball. Then Michael Jordan came back, ripped off three straight, and made me feel human as a sports fan.&lt;/p&gt;

&lt;p&gt;I remember watching Kobe, and then I remember the first time I &lt;em&gt;remembered&lt;/em&gt; Kobe.&lt;/p&gt;

&lt;p&gt;I remember listening to the news on the radio with my mom as she was driving me to school in 7th grade. Kobe was apologizing for his extra-marital sexual encounter. I remember watching the video later, but I remember him speaking everything he said in that moment.&lt;/p&gt;

&lt;p&gt;I remember him saying how, even though he thought it was consensual, he knew it wasn’t perceived that way, and that he was truly sorry.&lt;/p&gt;

&lt;p&gt;I remember seeing the video later. I remember him sitting there with nothing hiding him, owning up to his  grave mistake, next to his wife, and taking responsibility for what he did.&lt;/p&gt;

&lt;p&gt;I think Kobe knew he was an entertainer in that moment, but I think he also knew he was going to be a role model, whether he wanted that responsibility or not. I’d like to think he knew how the world would be watching. I’m 8 years younger than Kobe Bryant, and I was in 7th grade, so as old as I am now, I think that’s a striking amount of maturity in the wake of arguable immaturity.&lt;/p&gt;

&lt;p&gt;In the #MeToo era, I always think of how Kobe Bryant eventually owned up to his mistakes whenever someone is in the news over sexual assault allegations. I wish no one would commit such a crime, but I also wish more people had the sense to try to rehabilitate themselves the way Kobe did.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It’s overtime against the Suns in the playoffs. He gets the tip, dribbles past the key. 1 second to go. He throws it up over two defenders. There’s just no way it’s going in…then you remember who shot it.&lt;/p&gt;

&lt;p&gt;“Bang!” -Mike Breen&lt;/p&gt;

&lt;p&gt;You’ve seen it, and I won’t share the video here on purpose. Dote on your own memory or make it up as you go - the only person in the stadium that knew with titanium certainty that it was a bucket was Kobe, and when it went in, the stadium erupted.&lt;/p&gt;

&lt;p&gt;You’ve seen it. One fist cocked at eye-level, moving along the sideline. That knowing look - he knew it was going in. It must have been amazing to have been a teammate of his, and I mean that with zero percent irony (Kobe Bryant has a career average of 4.7 assists per game.)&lt;/p&gt;

&lt;p&gt;As I continue to grow up and work in my career where I sit in front of computers and ask them to do what I want them to do, I am still learning about leadership skills and what it takes to form a successful team. I often think about how I would never and have never asked a single person to do anything I wouldn’t do myself. I always think of how Kobe Bryant played basketball when I think of that sentiment talking to my team.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When the news spread, I knew he had a family, and one comprised almost exclusively of daughters. News spreads differently in 2020, and one of the videos that made me cry real tears was a video of Kobe Bryant on Jimmy Kimmel. He was talking about his oldest daughter, Gianna.&lt;/p&gt;

&lt;p&gt;He was talking about how so many people came up to him and told him how he and his wife, Vanessa, needed to have a boy to carry on his legacy. He told Jimmy how his daughter, Gianna, would speak up and say “Hey dad, I got this.”&lt;/p&gt;

&lt;p&gt;Think for a moment about the kind of father who raises a daughter to be confident enough to carry on the sports legacy of one of the greatest people to ever play basketball. Think about the lack of a precedent for her to play in the same league as him. Then mourn the passing of that daughter with her beloved father in the same tragedy. Rest in power, Gianna.&lt;/p&gt;

&lt;p&gt;I love my dad very much, and I think I have a pretty good relationship with him. My dad has influenced me to be who I am in many ways, and I can only hope that he’s as proud of me as Kobe was of Gianna, even if I only have one video to go off of.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I always was, and likely always be, terrible at basketball. I really only play to break a sweat, and I’m so awful that I am constantly scared that other people in the L.A. Fitness I go to will want me to play a game with them. I only ever really play when no one else is in that gym, or if I can ever practice meaningless layups and shots.&lt;/p&gt;

&lt;p&gt;Dave Chappelle coined the term “Kobe!” in one of his iconic skits from his show in 2003, and I can’t tell you how many people have made baffling shots over me and just yelled the same thing as they’ve gone in. I hope I can take myself less seriously moving forward and start yelling the same thing, too.&lt;/p&gt;</content><author><name>David Okun</name></author><summary type="html">Let people express their grief on social media. It’s cathartic for a lot of folks and one of the good things about this thing. Performative mourning is different, but people reaching out to each other - that’s not bad, that’s good. Feel free to ignore me. I’m for more kindness.&amp;mdash; Jake Fogelnest (@jakefogelnest) January 26, 2020</summary></entry><entry><title type="html">Kubernetes, Secret API Tokens, and Swift On The Server</title><link href="http://localhost:4000/2018/11/11/how-to-launch-a-swift-app-in-kubernetes/" rel="alternate" type="text/html" title="Kubernetes, Secret API Tokens, and Swift On The Server" /><published>2018-11-11T06:00:00-06:00</published><updated>2018-11-11T06:00:00-06:00</updated><id>http://localhost:4000/2018/11/11/how-to-launch-a-swift-app-in-kubernetes</id><content type="html" xml:base="http://localhost:4000/2018/11/11/how-to-launch-a-swift-app-in-kubernetes/">&lt;p&gt;This past Friday, &lt;a href=&quot;https://twitter.com/nibalizer&quot;&gt;Spencer Krum&lt;/a&gt; and I hopped on &lt;a href=&quot;https://twitch.tv/ibmdeveloper&quot;&gt;IBM’s Twitch channel&lt;/a&gt; and worked out some kinks with an OSS projct I’ve been working on for a while.&lt;/p&gt;

&lt;p&gt;A few years ago, &lt;a href=&quot;https://twitter.com/rauchg&quot;&gt;Guillermo Rauch&lt;/a&gt; made a tool called &lt;a href=&quot;https://github.com/rauchg/slackin&quot;&gt;Slackin&lt;/a&gt; that allows people to easily access a Slack instance that you want to be available for the community. Through some inspiration from some colleagues, I decided to try to re-write it in Swift, and the concept works! However, I was only able to set up a way to deploy it through one way - Cloud Foundry on &lt;a href=&quot;https://console.cloud.ibm.com&quot;&gt;IBM Cloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, I don’t mind if you use IBM Cloud (illuminati confirmed), but I think it’s important to have multiple means of deploying such an application if you are interested in using it. Spencer and I got on Twitch and we worked out how to use a secret API key to run this application in Kubernetes!&lt;/p&gt;

&lt;p&gt;The session is quite long, but its full of wonderful #content, and I recommend you give it a watch if you’re interested!&lt;/p&gt;

&lt;center&gt;
&lt;iframe src=&quot;https://player.twitch.tv/?allowfullscreen&amp;amp;channel=ibmdeveloper&amp;amp;video=333643594&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allow=&quot;autoplay; fullscreen&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;</content><author><name>David Okun</name></author><summary type="html">This past Friday, Spencer Krum and I hopped on IBM’s Twitch channel and worked out some kinks with an OSS projct I’ve been working on for a while.</summary></entry><entry><title type="html">The Importance Of Trying New Things</title><link href="http://localhost:4000/2018/09/04/importance-of-trying-new-things/" rel="alternate" type="text/html" title="The Importance Of Trying New Things" /><published>2018-09-04T07:00:00-05:00</published><updated>2018-09-04T07:00:00-05:00</updated><id>http://localhost:4000/2018/09/04/importance-of-trying-new-things</id><content type="html" xml:base="http://localhost:4000/2018/09/04/importance-of-trying-new-things/">&lt;h2 id=&quot;taking-the-broccoli&quot;&gt;Taking The Broccoli&lt;/h2&gt;

&lt;p&gt;When I was about 8 years old and living in Houston, my family friend Barnet took me to the grocery store. I lost a bet. I don’t remember what the bet was, but I know I lost, because my end of the bargain was that I had to eat broccoli for lunch. I distinctly remember the schadenfreude in Barnet’s laughter as he made me pick out my own stalk of broccoli to eat.&lt;/p&gt;

&lt;p&gt;We went home and he steamed the broccoli. I sat down, and chewed on the first forkful for at least 5 minutes. Barnet always tells me that I looked like I was taking medicine, so he loves telling people that I told my mom that, having lost the bet, “I took the broccoli.”&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;http://www.stjhs.org/images/2015-Dec/kid-broccoli[2].JPG&quot; /&gt; &quot;Mom, I took the broccoli.&quot;
&lt;/p&gt;

&lt;p&gt;It’s probably not the craziest thing in the world to imagine parent-figures taking drastic measures to get a young person to try new foods. People being picky about what they eat isn’t exactly breaking news either. However, this stuck with me for a while.&lt;/p&gt;

&lt;p&gt;I gained a reputation amongst my friends regarding the way I ate my burgers in high school and university (plain and dry), and I often was tricked into going to certain restaurants by other friends because they knew I would suggest the same old boring places I’d always suggested if they asked where I wanted to go.&lt;/p&gt;

&lt;p&gt;This limited me in more ways than one. However, the most obvious of these was my weight - I weighed 247 pounds two years after I graduated from my undergraduate degree program! One day I got tired of this and started making changes with more exercise, counting calories, etc. I did lose a lot of weight, and I feel healthier now, but that’s not the point of this blog post.&lt;/p&gt;

&lt;h2 id=&quot;a-leap-of-faith&quot;&gt;A Leap Of Faith&lt;/h2&gt;

&lt;p&gt;I reached my goal weight in 2012 (three cheers for losing 80 pounds!), but I still limited myself to only eating certain foods. I could still tell that something was off, because I was an adult by that point and I couldn’t figure out why I kept such a limited diet. Fast forward to 2013 - I moved to Oklahoma City for a contract job, and my friend Danny moved there at the same time as I did. He asked me if we could meet for dinner, and I asked him where. “Let’s go to this Ethiopian restaurant.”&lt;/p&gt;

&lt;p&gt;Panic. What was I going to do? Reading the menu ahead of time didn’t help - I had no idea what anything on the menu was to begin with. I was literally sweating alone in my apartment because of plans I had made. Why am I acting like this? Maybe I can just go to dinner and eat nothing. “I’m honestly not that hungry,” I thought I could say.&lt;/p&gt;

&lt;p&gt;We sit down. I haven’t seen Danny in a little bit, but he can tell something’s up. He asks me what I’m gonna get, I try to mumble “I’m honestly not that hungry,” so he might misunderstand me and stop asking me.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Dude, people all over the world eat this stuff - if they enjoy it, why shouldn’t we?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s weird to say that I felt what I can only describe as enlightenment when he said this, but that’s how it felt. I felt stupid after feeling that, but I’ll never forget the way it felt to have such a clear realization after the fact. Since then, I’ve loved trying new foods and I’m not as lean as I was in 2012, but I definitely feel like I eat better.&lt;/p&gt;

&lt;p&gt;By this point, you may be wondering, “I come here for the software blogging - what does this have to do with anything?”&lt;/p&gt;

&lt;h2 id=&quot;fitting-this-into-the-software-blog&quot;&gt;Fitting This Into The Software Blog&lt;/h2&gt;

&lt;p&gt;In 2013, I was almost exclusively a mobile developer. Whenever I applied for jobs, I made it very clear that I wasn’t able to do much else for a company other than Objective-C or some very &lt;strong&gt;very&lt;/strong&gt; loose C++. I did ok, but I always felt judged a little bit for putting up those barriers and limiting myself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want to point out that this is just my story - if you’ve found your niche and feel value to the world around you by staying in your niche, then you &lt;em&gt;OWN&lt;/em&gt; your niche. You do you, always.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wanted more. This isn’t a commentary on the field of mobile development, which is rich and carries a ton of new things to learn every day for any platform. However, I think back to when I was developing an app with some friends called &lt;a href=&quot;afterparty.io&quot;&gt;Afterparty&lt;/a&gt;. This app was all about taking photos and showing people what was going on around you geographically for a brief period of time (and we released it in January 2015, Evan Speigel.)&lt;/p&gt;

&lt;p&gt;To accomplish the social aspect of Afterparty, we needed a place to save photos in the cloud so others who had the mobile app could also see them. I was out of my league, and in no position to be putting code together for a server. Thank god for &lt;a href=&quot;http://www.parse.com&quot;&gt;Parse&lt;/a&gt;, which gave me an easy way to manage a REST API for Afterparty and write &lt;strong&gt;zero&lt;/strong&gt; server-side code. We shipped the initial release of the app on Parse, and it performed just fine. All I had to do was hope that Parse would always stay afloat.&lt;/p&gt;

&lt;p&gt;Well…&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Congrats &lt;a href=&quot;https://twitter.com/ParseIt?ref_src=twsrc%5Etfw&quot;&gt;@ParseIt&lt;/a&gt; on acquisition by Facebook. Also the 1st exit for &lt;a href=&quot;https://twitter.com/hashtag/MenloTalentFund?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#MenloTalentFund&lt;/a&gt; - Blog post by &lt;a href=&quot;https://twitter.com/shervin?ref_src=twsrc%5Etfw&quot;&gt;@shervin&lt;/a&gt; here: &lt;a href=&quot;http://t.co/GTGwezidJf&quot;&gt;http://t.co/GTGwezidJf&lt;/a&gt;&lt;/p&gt;&amp;mdash; Menlo Ventures (@MenloVentures) &lt;a href=&quot;https://twitter.com/MenloVentures/status/328918091323027456?ref_src=twsrc%5Etfw&quot;&gt;April 29, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Hey, if Facebook is buying them, they must be staying up forever!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;We&amp;#39;re retiring our services on January 28, 2017. Here are two tools to help you transition: &lt;a href=&quot;https://t.co/BiAR6menJc&quot;&gt;https://t.co/BiAR6menJc&lt;/a&gt; &lt;a href=&quot;https://t.co/knR4dRVkCX&quot;&gt;pic.twitter.com/knR4dRVkCX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Parse (@ParseIt) &lt;a href=&quot;https://twitter.com/ParseIt/status/692868030485831681?ref_src=twsrc%5Etfw&quot;&gt;January 29, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Oh. Well that sucks.&lt;/p&gt;

&lt;h2 id=&quot;trying-other-things&quot;&gt;Trying Other Things&lt;/h2&gt;

&lt;p&gt;In 2015, when I was working for IDscan, I had a little pet project to enable a potential customer to use our SDK. He needed it to work via a web service.&lt;/p&gt;

&lt;p&gt;I remembered reading an article about Node.js and Express by &lt;a href=&quot;https://www.raywenderlich.com/2663-how-to-write-a-simple-node-js-mongodb-web-service-for-an-ios-app&quot;&gt;Michael Katz&lt;/a&gt; which, ironically, starts with a link to an article I wrote about server-side Swift. I credit his article, which came out in 2014, with being my first exposure to Node.js and Express.&lt;/p&gt;

&lt;p&gt;In 2015, I leaned on this article heavily as I stumbled my way through an Express app prototype for this potential customer. I felt in over my head, but I remembered what Danny told me, and simply applied the same logic to the software I was trying to write. &lt;strong&gt;“People all over the world try Node.js - if they enjoy it, why shouldn’t I?”&lt;/strong&gt; I am 100% confident I wouldn’t have even tried to take on the project if he hadn’t said that to me years earlier. The prototype worked and I moved on from the project, and I was so happy I had written something other than code for a mobile phone.&lt;/p&gt;

&lt;p&gt;Though my mention of Parse earlier may seem critical, they’ve done an excellent job releasing their API solution as an open source &lt;a href=&quot;https://github.com/parse-community/parse-server&quot;&gt;Node.js framework&lt;/a&gt;, and it was time to keep Afterparty alive. I didn’t have to change much code, but the functionality I did have to write felt more natural. I actually felt like I could eventually figure out what I was doing, even if I didn’t know at the time.&lt;/p&gt;

&lt;p&gt;Here’s the kicker - I wasn’t really &lt;em&gt;supposed&lt;/em&gt; to be working on that web service at IDscan. I did it because I wanted to prove to myself that I could step up if I needed to, and that &lt;em&gt;I wasn’t going to be afraid anymore of trying new things&lt;/em&gt;. I probably should have devoted my time to other things on the priority list, but I felt an urge to learn Node by diving in and doing it. It seems ridiculous on its face to be afraid to try software, but the walls can close in on you quickly when you are around people who know what they’re doing, and nobody likes feeling totally lost with no way out.&lt;/p&gt;

&lt;p&gt;After writing that Express app, I no longer feel afraid to try anything I can get my hands on with work. It’s not always been easy, and there have been times where the fear will creep up again. The fear of being judged by someone else for your attempts at trying something in software is based in reality, and it’s encouraging to see networks like &lt;a href=&quot;https://stackoverflow.com/conduct&quot;&gt;Stack Overflow&lt;/a&gt; starting to take measures towards fostering an emotionally safe environment to learn and collaborate. Ash Furrow gave a great talk on this at &lt;a href=&quot;https://www.raywenderlich.com/422-rwdevcon-2017-inspiration-talk-building-compassionate-software-by-ash-furrow&quot;&gt;RWDevCon ‘17&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, the whole experience taught me a &lt;strong&gt;ton&lt;/strong&gt; about having some success getting an app to work outside the mobile ecosystem I was so used to. I don’t think its fair to say that my career growth has a linear relationship with the experiences I’ve had outside mobile development, but I wonder what would have happened if I forced myself to stay in my niche. This brings me to my last point.&lt;/p&gt;

&lt;h2 id=&quot;staying-in-my-niche&quot;&gt;Staying In My Niche&lt;/h2&gt;

&lt;p&gt;Swift was announced as a programming language in 2014, and I flipped out. I had spent so much time learning Objective-C, and I felt like it was going away as soon as Apple announced an alternative. It took a couple of months, but I finally figured I wasn’t going to get anywhere by only using Objective-C, so over the next two years of employment with IDscan, I started writing Swift during my free time to try and learn it. When you work with a team to develop a cross-platform framework in C++, Swift is rarely, if ever, part of the picture - I had no opportunities at work to grow my knowledge of Swift.&lt;/p&gt;

&lt;p&gt;On my own time, I developed &lt;a href=&quot;https://github.com/dokun1/fingerlock&quot;&gt;three&lt;/a&gt; &lt;a href=&quot;https://github.com/dokun1/firstRuleFireplace&quot;&gt;free&lt;/a&gt; (and &lt;a href=&quot;https://github.com/dokun1/jordan-meme-ios&quot;&gt;open source&lt;/a&gt;) apps, one of which gained some &lt;a href=&quot;http://www.nytimes.com/2016/06/04/arts/crying-jordan-the-meme-that-just-wont-die.html?_r=0&quot;&gt;notoriety&lt;/a&gt;, but all of which likely feature absolutely terribly written code. I knew I had to try, though. 2012 David wouldn’t have even tried. I am pleased with how my career has grown since then, and I struggle to think of the experiences I would have missed out on if I hadn’t gone to dinner with Danny.&lt;/p&gt;

&lt;p&gt;I hope you take the following things away from this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You are never just a &lt;em&gt;(insert last project you worked on)&lt;/em&gt; developer.&lt;/li&gt;
  &lt;li&gt;If you want to try &lt;em&gt;anything&lt;/em&gt; new, find someone who’s good at it or does it a lot, ask them how to start, and lean on them.&lt;/li&gt;
  &lt;li&gt;Don’t be afraid, because you’ll make tons of mistakes as you learn and get better at whatever you’re trying.&lt;/li&gt;
  &lt;li&gt;Mustard and pickles are trash, but Ethiopian Chicken Tagine is actually pretty delicious if you give it a shot.&lt;/li&gt;
  &lt;li&gt;A little bit of butter and Parmesan cheese makes broccoli taste pretty good.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>David Okun</name></author><summary type="html">Taking The Broccoli</summary></entry><entry><title type="html">How You Can Draw On My Homepage And Email It To Me</title><link href="http://localhost:4000/2018/08/25/invoking-open-whisk-from-an-html-canvas/" rel="alternate" type="text/html" title="How You Can Draw On My Homepage And Email It To Me" /><published>2018-08-25T07:00:00-05:00</published><updated>2018-08-25T07:00:00-05:00</updated><id>http://localhost:4000/2018/08/25/invoking-open-whisk-from-an-html-canvas</id><content type="html" xml:base="http://localhost:4000/2018/08/25/invoking-open-whisk-from-an-html-canvas/">&lt;p&gt;As I start getting more comfortable with web technology, both on the front end and the back end, I get curious about trying new things. Who doesn’t love drawing On The Internet (© 2018)?&lt;/p&gt;

&lt;p&gt;I wanted to put a canvas on my homepage that you could draw on, and I wanted to be able to see your images. I mean…this &lt;em&gt;shouldn’t&lt;/em&gt; be too complicated, right? Draw an image and send it somewhere, right?&lt;/p&gt;

&lt;p&gt;…did I see an opportunity to severely overcomplicate it and write a blog post about it? Did I find a way to shoehorn Swift into it when Node.js would have probably been fine? You bet I did!!&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://media.giphy.com/media/l2JdXrDsG0DiTxXK8/giphy.gif&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Ok, we have to draw a canvas first.&lt;/p&gt;

&lt;h2 id=&quot;the-canvas&quot;&gt;The Canvas&lt;/h2&gt;

&lt;p&gt;HTML has a great way to easily draw just about anything with a built-in tool called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API&quot;&gt;Canvas&lt;/a&gt;. There are at least 6 tutorials on the internet (possibly more) about Canvas, so I won’t dive deep into how the API works, but focus on how I used mine.&lt;/p&gt;

&lt;p&gt;So I went to DuckDuckGo and I sear–I mean, I dutifully read the documentation on MDN about Canvas. It was somewhat straightforward to draw the canvas on the main part of the page (all of the source code for this entire blog is &lt;a href=&quot;https://github.com/dokun1/dokun1.github.io&quot;&gt;here&lt;/a&gt;), but what I needed to make drawing with your mouse possible was to set up &lt;code class=&quot;highlighter-rouge&quot;&gt;eventListener&lt;/code&gt;s on the canvas.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mousemove&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;findxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'move'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mousedown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;findxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'down'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mouseup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;findxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'up'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mouseout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;findxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'out'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And what if I want to detect touches on a mobile device? Well, those events have different names, so you can add listeners for them as well, and you can tell the document to not scroll around, or to prevent the default action, so it stays still while you draw:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;touchstart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;findxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'touchdown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;touchmove&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;findxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'touchmove'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;touchcancel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;findxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'up'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;touchend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;findxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'up'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(&lt;strong&gt;NB:&lt;/strong&gt; By the way, most of this I was able to find in a great StackOverflow post which you can check out &lt;a href=&quot;https://stackoverflow.com/questions/2368784/draw-on-html5-canvas-using-a-mouse&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;In short, whenever the &lt;code class=&quot;highlighter-rouge&quot;&gt;mousedown&lt;/code&gt; event registers, and is followed by subsequent &lt;code class=&quot;highlighter-rouge&quot;&gt;mousemove&lt;/code&gt; events, you can tell the canvas to draw a path from pixel to pixel. Anytime a &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseup&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mouseout&lt;/code&gt; event registers, you don’t draw any pixels until &lt;code class=&quot;highlighter-rouge&quot;&gt;mousedown&lt;/code&gt; comes up again.&lt;/p&gt;

&lt;p&gt;Ok, sweet! So we have our picture. I can’t wait to see what my friends draw, and I’m certain that none of my friends will abuse this. (future blog post about image detection and conditional rejection?!?)&lt;/p&gt;

&lt;p&gt;Now, how do I get it to my email inbox?&lt;/p&gt;

&lt;h2 id=&quot;openwhisk&quot;&gt;OpenWhisk&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://openwhisk.apache.org&quot;&gt;Apache OpenWhisk&lt;/a&gt; is a really awesome platform that allows you to write functions in just about any programming language you want, and to have them made available in a cloud of your choosing. We have them available as Cloud Functions at &lt;a href=&quot;https://console.bluemix.net/openwhisk/&quot;&gt;IBM&lt;/a&gt;, and I decided I was going to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHTTPRequest&lt;/code&gt; to send it to an action on OpenWhisk. After that, I use &lt;a href=&quot;https://sendgrid.com&quot;&gt;SendGrid&lt;/a&gt; to send an email to myself.&lt;/p&gt;

&lt;p&gt;Swift is natively supported in IBM’s build of OpenWhisk, so I thought I’d give that a shot! Here’s what the function looks like in the absence of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sendImage&lt;/code&gt; function I wrote for it:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;sendImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sent message to David from: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Had an error sending message to David from: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only requirement for an OpenWhisk function is the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function, and IBM’s deployment with Swift 4 makes use of the Codable Routing feature in &lt;a href=&quot;https://kitura.io&quot;&gt;Kitura&lt;/a&gt;, which strongly types the expected input and output of your web API that you set up.&lt;/p&gt;

&lt;p&gt;SendGrid has some good SDKs, but most importantly they have an API that shows you how to use cURL! Here’s what my function to invoke their &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; API looks like:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bearer xxxxxx----apikey-goes-here-xxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;personalizations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;david@okun.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;David Okun&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;website@okun.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Your Website&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; drew a picture on your website!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;img alt=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;My Image&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;postData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONSerialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withJSONObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://api.sendgrid.com/v3/mail/send&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allHTTPHeaderFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postData&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dataTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, neat. So all I have to do is send a JSON payload with a &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; and an &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt; (formatted as a base64 string) and I’m good to go, right?&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://media.giphy.com/media/3o6Mb43PiNTQS5WgLu/giphy.gif&quot; /&gt;Nope.
&lt;/p&gt;

&lt;p&gt;It turns out that, in order to send a request using a &lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHTTPRequest&lt;/code&gt; inside a browser, you need to have CORS (Cross Origin Resource Sharing) turned on. Thankfully, OpenWhisk has a way to do that, and by foregoing authorization, I was able to turn it on as a “Web Action” in the web GUI. I would like to thank my colleague Kevin Hoyt for this great &lt;a href=&quot;https://www.kevinhoyt.com/2017/06/15/async-openwhisk-web-action-with-cors/&quot;&gt;blog post&lt;/a&gt; on the topic.&lt;/p&gt;

&lt;p&gt;After that, all I had to do was disable the button while the request is in the air and…&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/img/2018-08-25/openWhiskResult.jpg&quot; /&gt;Nice.
&lt;/p&gt;

&lt;p&gt;And there you go! Again, all of the code for this post is on the GitHub repo for this site right &lt;a href=&quot;https://github.com/dokun1/dokun1.github.io&quot;&gt;here&lt;/a&gt;. I hope you have even more fun on my website than you were already having :-]&lt;/p&gt;</content><author><name>David Okun</name></author><summary type="html">As I start getting more comfortable with web technology, both on the front end and the back end, I get curious about trying new things. Who doesn’t love drawing On The Internet (© 2018)?</summary></entry><entry><title type="html">Video - Live Demo of Swift NIO In An Xcode Playground</title><link href="http://localhost:4000/2018/08/02/live-demo-swift-nio/" rel="alternate" type="text/html" title="Video - Live Demo of Swift NIO In An Xcode Playground" /><published>2018-08-02T07:00:00-05:00</published><updated>2018-08-02T07:00:00-05:00</updated><id>http://localhost:4000/2018/08/02/live-demo-swift-nio</id><content type="html" xml:base="http://localhost:4000/2018/08/02/live-demo-swift-nio/">&lt;p&gt;I recently spoke at a meetup in Austin about Apple’s &lt;a href=&quot;https://github.com/apple/swift-nio&quot;&gt;Swift NIO&lt;/a&gt; framework and what it means for the networking landscape in Swift.&lt;/p&gt;

&lt;p&gt;I took some inspiration from &lt;a href=&quot;https://twitter.com/chriseidhof&quot;&gt;Chris Eidhof&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/icanzilb&quot;&gt;Marin Todorov&lt;/a&gt; to level up my live demo game, and I hope it paid off. I would also like to thank an unnamed person for making the playground part of this possible - this person knows who this person is, but I can’t say their name publicly :-D&lt;/p&gt;

&lt;p&gt;Anyway, if you want to see how you can make a TCP server in an Xcode playground, here’s something relevant to your interests. Enjoy!!&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/267825628&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This talk was based on a tutorial I wrote for &lt;a href=&quot;raywenderlich.com&quot;&gt;raywenderlich.com&lt;/a&gt;, which you can read &lt;a href=&quot;http://okun.io/2018/04/09/tcp-server-with-swift-nio/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>David Okun</name></author><summary type="html">I recently spoke at a meetup in Austin about Apple’s Swift NIO framework and what it means for the networking landscape in Swift.</summary></entry><entry><title type="html">The Pain Of Updating A Blog</title><link href="http://localhost:4000/2018/07/29/the-pain-of-updating-a-blog/" rel="alternate" type="text/html" title="The Pain Of Updating A Blog" /><published>2018-07-29T07:00:00-05:00</published><updated>2018-07-29T07:00:00-05:00</updated><id>http://localhost:4000/2018/07/29/the-pain-of-updating-a-blog</id><content type="html" xml:base="http://localhost:4000/2018/07/29/the-pain-of-updating-a-blog/">&lt;p&gt;Finally!!!&lt;/p&gt;

&lt;p&gt;Tech debt is one thing, but when it’s something you care personally about, it’s insidious at worst. I’ve not been doing a good job keeping this here web log updated, but I finally had some time (and some help!) to do it this weekend while at an event in San Francisco, and I’m thrilled I automated some things.&lt;/p&gt;

&lt;h2 id=&quot;thank-yous&quot;&gt;Thank Yous&lt;/h2&gt;

&lt;p&gt;I really need to give major props to &lt;a href=&quot;https://twitter.com/emckean&quot;&gt;Erin McKean&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/timroexp&quot;&gt;Tim Robinson&lt;/a&gt; for helping me get over the hump. Their tremendous calmness and poise helped me get out from behind the 8-ball, and helped me serve as the basis for this post, as well as what I am hoping will be more material in the future!!&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;I use &lt;a href=&quot;https://hostgator.com&quot;&gt;HostGator&lt;/a&gt; for my web hosting, and while I work for &lt;a href=&quot;https://www.ibm.com&quot;&gt;TEH CL0UD&lt;/a&gt; and could probably do something different, I’m stuck in my ways here. About a year ago, I finally got used to using &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; for my website, and for the most part it’s been working great. I’ve never been a &lt;em&gt;huge&lt;/em&gt; fan of Ruby, but this definitely gets the job done.&lt;/p&gt;

&lt;p&gt;You can always see a local mirror of this website &lt;a href=&quot;https://dokun1.github.io&quot;&gt;here&lt;/a&gt; as well as the repo for this site &lt;a href=&quot;https://github.com/dokun1/dokun1.github.io&quot;&gt;here&lt;/a&gt;, but I wanted it on my actual domain, and I wanted to not limit myself to a GitHub page. That meant I was building my site with Jekyll on my machine…and manually FTP’ing the generated site to my host via Cyberduck…&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://media.cyberduck.io/img/cyberduck-icon-384.png&quot; /&gt;Can't bounce any new ideas off this one...
&lt;/p&gt;

&lt;p&gt;Furthermore, I had some issue with Jekyll that made things look UGLY unless I manually went in and changed things to remove a fledgling comment line. I’m not even going to post a photo of it here, because the sooner I can forget about it, the better.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;Well, Erin was gracious enough to sit with me and point out where the bug was coming from. Sometimes, you feel dumb when you see a solution to a bug you &lt;strong&gt;should&lt;/strong&gt; have fixed 7 months ago, but I was so overjoyed fixing this that I didn’t care. Still, the process of updating the blog was a pain, and I had to automate it.&lt;/p&gt;

&lt;p&gt;Erin suggested a Travis CI job that uploads it for me. Truthfully, she suggested triggering an OpenWhisk action every time I committed a change to my blog, and using that to upload it to my host. “That would be more bloggable.” One day!&lt;/p&gt;

&lt;p&gt;First off, &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; and FTP. I tried uploading one file with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; file.jpg ftp://ftp.okun.io &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works for one file. Want to upload a directory? Too bad. Time to furiously Google things and try them, being able to taste sweet victory not far off.&lt;/p&gt;

&lt;p&gt;I tried some things with the &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; command, but largely proved unsuccessful. Then I asked &lt;a href=&quot;https://stackoverflow.com/questions/51575574/curl-ftp-for-directory-containing-files-and-directories#51581328&quot;&gt;a question&lt;/a&gt; on StackOverflow, and that’s where Tim came in. I tried his command on the CLI:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find _site &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ftp-create-dirs&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; ftp://ftp.okun.io/&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can taste it! So I wrote this into a script on Travis CI, and the file ultimately looked like this:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gem install jekyll&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;find _site -type f -exec curl --user $FTPUSERNAME:$FTPPASSWORD --ftp-create-dirs -T {} ftp://ftp.okun.io/{} \;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aaaaaaand…nope. Code 430 errors all around - access denied. Panic. I was so close!!! But then I took a breath, and read a blog post that Tim sent me (which you can read &lt;a href=&quot;http://ajaykarwal.com/deploying-jekyll-using-travis-ci/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you’re reading this, you now know that more than half of all software development is just being really good at searching for things on search engines.&lt;/p&gt;

&lt;p&gt;A little bit more work, and ultimately my &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file looks like this now:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.4.1&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gem install jekyll&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JEKYLL_ENV=production&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;recipients&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;david@okun.io&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;on_success&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;on_failure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x _scripts/build.sh&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_scripts/build.sh&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x _scripts/deploy.sh&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_scripts/deploy.sh&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;addons&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ncftp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that deploy script? Two lines:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;ncftpput &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FTPUSERNAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FTPPASSWORD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ftp.okun.io&quot;&lt;/span&gt; ./ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, all I have to do is commit to my repo - Travis CI does the rest, and things get updated in about a minute.&lt;/p&gt;

&lt;p&gt;Whew! Now I have more to say here. Again, thank you Erin and Tim for your help/rubber-ducking/calmness.&lt;/p&gt;</content><author><name>David Okun</name></author><summary type="html">Finally!!!</summary></entry><entry><title type="html">New Video Course - Server Side Swift with Kitura</title><link href="http://localhost:4000/2018/06/12/new-video-course-kitura-swift/" rel="alternate" type="text/html" title="New Video Course - Server Side Swift with Kitura" /><published>2018-06-12T07:00:00-05:00</published><updated>2018-06-12T07:00:00-05:00</updated><id>http://localhost:4000/2018/06/12/new-video-course-kitura-swift</id><content type="html" xml:base="http://localhost:4000/2018/06/12/new-video-course-kitura-swift/">&lt;p&gt;&lt;strong&gt;Editor’s Note: This is mirrored from &lt;a href=&quot;https://www.raywenderlich.com/196340/new-course-server-side-swift-with-kitura&quot;&gt;RayWenderlich.com&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re ready to level up your skills to become a full stack developer, we’re releasing a brand new course for you today: &lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/1&quot;&gt;Server Side Swift with Kitura&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Kitura is a REST API framework written in Swift by IBM. If you ever wanted to extend your skills past developing for mobile devices, but didn’t have time to learn a new language, this is your chance!&lt;/p&gt;

&lt;p&gt;In this 31-video course, you’ll learn how to write a server in Swift, link a mobile app with it, and how to make a website in Swift using your server.&lt;/p&gt;

&lt;p&gt;Take a look at what’s inside:&lt;/p&gt;

&lt;h2 id=&quot;part-1-hello-kitura&quot;&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/1&quot;&gt;Part 1: Hello, Kitura&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/1&quot;&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/06/kitura_screenshot_1-650x366.jpg&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;366&quot; class=&quot;aligncenter size-large wp-image-196602 bordered&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/1&quot;&gt;Introduction&lt;/a&gt;&lt;/em&gt;: We'll cover what you'll learn in this course, and how you'll walk away with a truly full-stack application.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/2&quot;&gt;EmojiJournal - The Walkthrough&lt;/a&gt;&lt;/em&gt;: We'll walk through the finished product and what it should look like, outlining each component of the application and what you'll use to make it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/3&quot;&gt;Getting Started&lt;/a&gt;&lt;/em&gt;: We'll set up your development environment and make sure you have everything you need to know to write all the code you'll need for this course.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/4&quot;&gt;HTTP Crash Course&lt;/a&gt;&lt;/em&gt;: I'll walk you through the basics of HTTP and how it will act as a data transport layer for the basis of this course.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/5&quot;&gt;Running Your API In Docker&lt;/a&gt;&lt;/em&gt;: Let's set up Docker on your machine so that you can easily test your Kitura API on Linux and prepare it for deployment.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/6&quot;&gt;Preparing To Deploy - IBM Cloud&lt;/a&gt;&lt;/em&gt;: I'll show you how to set up your API for deployment with Cloud Foundry via IBM Cloud, and how to set up your machine to easily push new versions every time you make a change.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/7&quot;&gt;Deploying To IBM Cloud&lt;/a&gt;&lt;/em&gt;: I'll walk you through what to expect when you &amp;quot;push the button&amp;quot; to put your API in the Cloud, and how to test it when it's live on the internet!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/8&quot;&gt;Introduction To Kitura CLI&lt;/a&gt;&lt;/em&gt;: I'll also walk you through the Kitura CLI, which allows you to generate boilerplate Kitura servers from the command line.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/9&quot;&gt;Conclusion&lt;/a&gt;&lt;/em&gt;: Let's recap everything we've covered and how it positions you to focus on one component at a time as we go through the rest of the course!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;part-2-completing-your-backend&quot;&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/10&quot;&gt;Part 2: Completing Your Backend&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/06/kitura_screenshot_2-650x366.jpg&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;366&quot; class=&quot;aligncenter size-large wp-image-196603 bordered&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/10&quot;&gt;Introduction To Kitura 2.0&lt;/a&gt;&lt;/em&gt;: We'll cover the basics introduced in Kitura 1.0, and then go into some of the finer points of what was added to the Kitura framework in version 2.0, including what a router is and how codable routes work.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/11&quot;&gt;Making Codable Routes&lt;/a&gt;&lt;/em&gt;: Let's make a basic GET route using Kitura, and then let's enhance and streamline that route using the Codable protocol with Kitura's best built in feature - Codable Routing.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/12&quot;&gt;Challenge: Create A DELETE Route&lt;/a&gt;&lt;/em&gt;: Now that you've made two routes in Kitura, you'll make your third one to improve on its functionality.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/13&quot;&gt;Introduction To CouchDB&lt;/a&gt;&lt;/em&gt;: I'll show you how CouchDB works, and how you'll make use of it to store journal entries that you enter with EmojiJournal.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/14&quot;&gt;Connecting To CouchDB&lt;/a&gt;&lt;/em&gt;: I'll walk you through setting up CouchDB on your local machine, and how to connect your Kitura server to it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/15&quot;&gt;Challenge: Using CouchDB In The Cloud&lt;/a&gt;&lt;/em&gt;: After I show you how to set up an instance of CouchDB in IBM Cloud, I'll challenge you to connect to it once you have all the information you need to do so.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/16&quot;&gt;Writing Your Persistence Functions&lt;/a&gt;&lt;/em&gt;: I'll walk you through writing a series of persistence functions in your Kitura application, so that you have an easy way to keep track of how your app uses CouchDB.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/17&quot;&gt;Challenge: Linking Your Router To CouchDB&lt;/a&gt;&lt;/em&gt;: After you write your persistence functions, you'll hook up your codable routes to your database, finally putting all the pieces together.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/18&quot;&gt;Conclusion&lt;/a&gt;&lt;/em&gt;: Take a second to smell the roses, and look at what you built! I'll run you through a test drive of your Kitura application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;part-3-linking-your-ios-client-to-kitura&quot;&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/19&quot;&gt;Part 3: Linking Your iOS Client To Kitura&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/06/kitura_screenshot_3-650x366.jpg&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;366&quot; class=&quot;aligncenter size-large wp-image-196604 bordered&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/19&quot;&gt;Introduction To KituraKit&lt;/a&gt;&lt;/em&gt;: Time to work within iOS again! I'll show you how KituraKit makes client-side connections to Kitura nice and straightforward, and how you can use it to drastically reduce the amount of code you write for networking on your client.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/20&quot;&gt;Demo The iOS Starter&lt;/a&gt;&lt;/em&gt;: Let's walk through what the iOS app does right now, and let's highlight the pieces you need to get into and make work!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/21&quot;&gt;Integrating KituraKit Using Cocoapods&lt;/a&gt;&lt;/em&gt;: I'll help you set up KituraKit with Cocoapods on your iOS application, so that nothing stands in the way of you writing your networking code!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/22&quot;&gt;Creating Your KituraKit Client&lt;/a&gt;&lt;/em&gt;: First, you'll walk through writing a client class for your KituraKit client, so that you have easy functions to make use of when you are connecting your iOS app to your server.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/23&quot;&gt;Challenge: Finishing Your Client&lt;/a&gt;&lt;/em&gt;: Now that you've made your client class, I'll help you hook up a couple of the functions to the UI, and let you finish putting the puzzle together yourself once you have everything you need.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/24&quot;&gt;Conclusion&lt;/a&gt;&lt;/em&gt;: This is the moment you knew you could be a full-stack developer - let's test out your mobile application, and see how well it works with your shiny new Kitura server!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;part-4-templating-a-html-front-end-with-stencil&quot;&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/25&quot;&gt;Part 4: Templating A HTML Front-End With Stencil&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/06/kitura_screenshot_4-650x366.jpg&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;366&quot; class=&quot;aligncenter size-large wp-image-196605 bordered&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/25&quot;&gt;Introduction To Web Clients&lt;/a&gt;&lt;/em&gt;: I'll show you the importance of having web functionality for your application, and why it's important to make a client thats accessible to everyone. Then, I'll show you how Kitura can help you accomplish that goal.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/26&quot;&gt;Introduction To KituraStencil&lt;/a&gt;&lt;/em&gt;: Let's take a look at how a templating engine called Stencil can help you make any website you want, and how you can pass information from your Swift API into your HTML page with KituraStencil. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/27&quot;&gt;Creating A Landing Page&lt;/a&gt;&lt;/em&gt;: Let's start by serving up a static HTML page using your existing Kitura router that you've already created, and take some time to explain how you can serve a context with it.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/28&quot;&gt;Showing Your Web UI&lt;/a&gt;&lt;/em&gt;: Expand on your previous route by adding some context to your template page, and take a look at how that gets populated throughout your HTML - you'll have a web UI working by the end of this video!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/29&quot;&gt;Adding A New Entry Via The Web&lt;/a&gt;&lt;/em&gt;: Now that you can see the entries you've populated, let's make it possible to use the web UI to add another entry to your EmojiJournal. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/30&quot;&gt;Challenge: Deleting Entries Via The Web&lt;/a&gt;&lt;/em&gt;: The final hurrah - you've got everything you need to know to fit the last puzzle piece into your web UI, and now I'll challenge you to add it in and delete those EmojiJournal entries you want to remove.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/31&quot;&gt;Conclusion&lt;/a&gt;&lt;/em&gt;: You did it! Let's see how you can use either of your clients at any given time to use EmojiJournal, and what you might be interested in trying out next time around!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where To Go From Here?&lt;/h2&gt;

&lt;p&gt;Want to check out the course? The &lt;a href=&quot;https://videos.raywenderlich.com/courses/123-server-side-swift-with-kitura/lessons/1&quot;&gt;first part of the course&lt;/a&gt; is ready for you today! The rest of the course will be released over the next two weeks, and entire course will be available for free.

Stay tuned for more new and updated courses to come. I hope you enjoy the course! :]&lt;/p&gt;</content><author><name>David Okun</name></author><summary type="html"></summary></entry><entry><title type="html">TCP Server With the SwiftNIO Networking Framework</title><link href="http://localhost:4000/2018/04/09/tcp-server-with-swift-nio/" rel="alternate" type="text/html" title="TCP Server With the SwiftNIO Networking Framework" /><published>2018-04-09T07:00:00-05:00</published><updated>2018-04-09T07:00:00-05:00</updated><id>http://localhost:4000/2018/04/09/tcp-server-with-swift-nio</id><content type="html" xml:base="http://localhost:4000/2018/04/09/tcp-server-with-swift-nio/">&lt;p&gt;&lt;strong&gt;Editor’s Note: This is mirrored from &lt;a href=&quot;https://www.raywenderlich.com/188345/swift-server-tutorial-tcp-server-with-the-swiftnio-networking-framework&quot;&gt;RayWenderlich.com&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mobile developers often work with REST APIs or other networking protocols in their applications — whether it’s to retrieve data, communicate with other devices, or something else. &lt;em&gt;&lt;a href=&quot;https://github.com/apple/swift-nio/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;SwiftNIO&lt;/a&gt;&lt;/em&gt;, written by Apple, is a low-level networking framework that makes writing Swift servers even easier than before, empowering Swift developers to leverage their skills on the server side.&lt;/p&gt;

&lt;p&gt;In this tutorial, you’ll:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learn about what purpose SwiftNIO serves and why Apple made and open-sourced it.&lt;/li&gt;
  &lt;li&gt;Practice working within a SwiftNIO framework by creating a &lt;em&gt;Quote Of The Day&lt;/em&gt; Swift TCP server that you’ll connect to using a provided iOS app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start, you’ll need a Mac running at least macOS 10.12 Sierra with Xcode 9.3 or later. You’ll also use the command line, so be sure to open up Terminal, and check the command line utility for Swift is installed. You can check this by entering &lt;code class=&quot;highlighter-rouge&quot;&gt;swift --version&lt;/code&gt;. It must be version 4.1 or later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The command line tool you need should be installed with Xcode. If you don’t successfully see your version of Swift when running the &lt;code class=&quot;highlighter-rouge&quot;&gt;swift --version&lt;/code&gt; command, go &lt;a href=&quot;https://developer.apple.com/library/content/technotes/tn2339/_index.html#//apple_ref/doc/uid/DTS40014588-CH1-DOWNLOADING_COMMAND_LINE_TOOLS_IS_NOT_AVAILABLE_IN_XCODE_FOR_MACOS_10_9__HOW_CAN_I_INSTALL_THEM_ON_MY_MACHINE_&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;First, it’s helpful to understand exactly how the SwiftNIO framework differs from other Swift frameworks.&lt;/p&gt;

&lt;h3 id=&quot;swift-on-the-server-status-quo&quot;&gt;Swift-on-the-Server Status Quo&lt;/h3&gt;

&lt;p&gt;If you’re a Swift developer, it’s very likely you’ve focused only on mobile applications. This makes servers in the cloud seem like voodoo magic — or at least a little confusing at first.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/cloudConfused-500x500.jpg&quot; alt=&quot;SwiftNIO&quot; width=&quot;300&quot; height=&quot;300&quot; class=&quot;size-large wp-image-188663&quot; /&gt;I don't get you, cloud.
&lt;/p&gt;

&lt;p&gt;Thankfully, if you know Swift, frameworks like &lt;a href=&quot;http://kitura.io&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Kitura&lt;/a&gt; and &lt;a href=&quot;https://vapor.codes/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Vapor&lt;/a&gt; make writing a web service easier.&lt;/p&gt;

&lt;p&gt;However, these frameworks operate as a convenient layer on top of some sophisticated and low-level socket networking code, much of which interoperates with C. In the case of Kitura, once Swift became open sourced and available for Linux, IBM wrote &lt;em&gt;&lt;a href=&quot;https://github.com/IBM-Swift/BlueSocket&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;BlueSocket&lt;/a&gt;&lt;/em&gt; to serve as its low-level socket networking layer.&lt;/p&gt;

&lt;h3 id=&quot;how-swiftnio-differs&quot;&gt;How SwiftNIO Differs&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/cloudHappy-500x500.jpg&quot; alt=&quot;SwiftNIO&quot; width=&quot;300&quot; class=&quot;size-large wp-image-188664&quot; /&gt;You complete me, NIO.
&lt;/p&gt;

&lt;p&gt;BlueSocket is great, but it doesn’t fill in all the blanks when it comes to server-side Swift. For example, Kitura not only included the work of BlueSocket, but it also implemented the entire HTTP stack under the hood, so incoming communication would be routed the right way. Now, Apple has raised the bar, introducing &lt;em&gt;SwiftNIO&lt;/em&gt; and essentially handling socket communication and HTTP for us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SwiftNIO has been written as a port of &lt;a href=&quot;https://netty.io/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Netty&lt;/a&gt;, a Java low-level networking framework, but in Swift.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/normansDiagram-650x358.jpg&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;358&quot; class=&quot;size-large wp-image-188746&quot; /&gt; This is a diagram taken from &lt;a href=&quot;https://www.youtube.com/watch?v=QJ3WG9kRLMo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Norman Maurer's talk&lt;/a&gt; on SwiftNIO, given March 1, 2018, in Tokyo.
&lt;/p&gt;

&lt;p&gt;This tutorial won’t go into great detail about every piece of the above diagram but, as you work your way through, each piece should begin to make sense. However, it’s worth explaining what an &lt;code&gt;EventLoopGroup&lt;/code&gt; is and, thus, what a &lt;code&gt;MultiThreadedEventLoopGroup&lt;/code&gt; accomplishes with this class.&lt;/p&gt;

&lt;h3 id=&quot;eventloopgroup-and-multithreadedeventloopgroup&quot;&gt;EventLoopGroup and MultiThreadedEventLoopGroup&lt;/h3&gt;

&lt;p&gt;An &lt;code&gt;EventLoop&lt;/code&gt; runs in a loop, looking for new tasks to handle that have come in from a new client via a network connection. Think of an &lt;code&gt;EventLoop&lt;/code&gt; like a serial &lt;code&gt;DispatchQueue&lt;/code&gt;, which allows you to delegate blocks of code for execution at a time of your choosing. As multiple &lt;code&gt;EventLoop&lt;/code&gt; instances cycle through your thread, they look for tasks to execute.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/runLoop-1.png&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;240&quot; class=&quot;size-full wp-image-189249&quot; /&gt;After an EventLoop searches for tasks and schedules them, it executes them one by one.
&lt;/p&gt;

&lt;p&gt;When you put these &lt;code&gt;EventLoop&lt;/code&gt; instances into an &lt;code&gt;EventLoopGroup&lt;/code&gt;, the handler looks more like a concurrent &lt;code&gt;DispatchQueue&lt;/code&gt;. You can also think of this like a thread pool. This means you can submit multiple tasks to the group and, depending on the time it takes to complete each task, the order of completed tasks may not be what you initially submitted to the group.&lt;/p&gt;

&lt;p&gt;This is where the &lt;code&gt;MultiThreadedEventLoopGroup&lt;/code&gt; class comes in. This specifies the &lt;code&gt;EventLoopGroup&lt;/code&gt; that’s created will tie each group to a specific thread, further streamlining your asynchronous operations that come in. Think of it like an upgraded &lt;code&gt;EventLoopGroup&lt;/code&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/runLoopGroup.png&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;416&quot; class=&quot;size-full wp-image-189251&quot; /&gt;Each task gets taken care of in its own discrete group.
&lt;/p&gt;

&lt;h3 id=&quot;synchronousasynchronous-example&quot;&gt;Synchronous/Asynchronous Example&lt;/h3&gt;

&lt;p&gt;Let’s say you’re at a food truck operated by one person. The person at the front of the line orders his food. He pays; he waits. He gets his food. The next person repeats this same process. The food truck delivers everyone’s order correctly, but it’s very slow. If you’re at the end of the line, you are pretty unhappy.&lt;/p&gt;

&lt;p&gt;This is an example of a synchronous operation — something that blocks all other work until the current request is completed. A connection to a PostgreSQL database is another example.&lt;/p&gt;

&lt;p&gt;Now, imagine the same food truck has an order-taker &lt;em&gt;and&lt;/em&gt; two chefs. The person at the front of the line orders his food.  He pays; he waits. But wait! The second person can now order his food without having to wait for the operator to complete the order for the first person. And the first person only has to wait for one other person. Here, the chefs are the EventLoopGroups making the food.&lt;/p&gt;

&lt;p&gt;This is an example of a set of asynchronous operations. Ultimately, you’re waiting on the available resources of the service. But this new setup can handle multiple requests at the same time. The end user will see an increase in performance.&lt;/p&gt;

&lt;p&gt;Another example of this is… well, SwiftNIO!&lt;/p&gt;

&lt;h2 id=&quot;setting-up-quote-of-the-day&quot;&gt;Setting Up Quote of the Day&lt;/h2&gt;

&lt;p&gt;To kick things off, download the materials for this tutorial; you can find a link at the top or bottom of this tutorial. You’ll be implementing a server called &lt;em&gt;Quote of the Day&lt;/em&gt; — believe it or not, &lt;em&gt;Quote of the Day (QOTD)&lt;/em&gt; is a real internet standard (RFC). You can read the protocol spec &lt;em&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc865&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The flow of information from the server works as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open a TCP connection upon request.&lt;/li&gt;
  &lt;li&gt;Write a random quote to the response.&lt;/li&gt;
  &lt;li&gt;Send the response.&lt;/li&gt;
  &lt;li&gt;Close the connection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you take a look at the RFC for &lt;em&gt;Quote of the Day&lt;/em&gt;, you’ll notice two key things that you’ll do differently in this tutorial:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You’ll use port 1717 instead of 17. Port 17 is locked down, requiring root permissions on macOS.&lt;/li&gt;
  &lt;li&gt;You’ll only create a TCP/IP connection, not a UDP connection. As of this writing, UDP is still a WIP on SwiftNIO (so many acronyms!).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this tutorial, you’ll also use an iOS client to check that the server works properly. This iOS client uses &lt;em&gt;&lt;a href=&quot;https://github.com/IBM-Swift/BlueSocket&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;BlueSocket&lt;/a&gt;&lt;/em&gt; — you won’t be making any changes to the iOS app, but feel free to look through the source code on your own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SwiftNIO also has the ability to act as a client for network communication and not just as a server. This means you could, in theory, write an iOS client using SwiftNIO, too.&lt;/p&gt;

&lt;h2 id=&quot;running-the-ios-client&quot;&gt;Running the iOS Client&lt;/h2&gt;

&lt;p&gt;In the starter project, go to the &lt;code&gt;Mobile/&lt;/code&gt; directory and open up the &lt;code&gt;swift-nio-qotd-client.xcodeproj&lt;/code&gt; file. In Xcode, run this on a simulator of your choosing. However, don’t run this on a device, as you won’t easily be able to connect with a local server connection on your machine from your device.&lt;/p&gt;

&lt;p&gt;When the simulator boots up, tap the refresh icon in the upper right-hand corner of the screen. You should see the following error underneath the &lt;em&gt;Quote&lt;/em&gt; heading:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Swift-NIO-error-281x500.png&quot; alt=&quot;&quot; width=&quot;281&quot; height=&quot;500&quot; class=&quot;aligncenter size-large bordered wp-image-189185&quot; /&gt;Fear not! This is normal.
&lt;/p&gt;

&lt;p&gt;Keep this simulator open, but minimize it on your machine. You’ll come back to this later when you get your server up and running.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-your-server-project&quot;&gt;Setting Up Your Server Project&lt;/h2&gt;

&lt;p&gt;Open Terminal and navigate to the root directory of the starter project. Enter the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Server/
swift build
swift package generate-xcodeproj
open QOTD-NIO.xcodeproj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you have &lt;em&gt;MacPorts&lt;/em&gt; installed on your machine you may have to use the following in place of &lt;code&gt;swift build&lt;/code&gt; above: &lt;code&gt;rm -rf .build &amp;amp;&amp;amp; unset PKG_CONFIG_PATH &amp;amp;&amp;amp; swift build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once Xcode opens, go to the top of the window and, in the scheme selector, select &lt;code&gt;QOTD-NIO&lt;/code&gt; and &lt;code&gt;My Mac&lt;/code&gt; like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/schemeSelectorStarter.jpg&quot; alt=&quot;&quot; class=&quot;bordered aligncenter size-full&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Build and run the project. At the bottom of the debugger, you should see a single printed message: &lt;em&gt;This server will be… the one!!!&lt;/em&gt; If you see this, you’re ready to dive in.&lt;/p&gt;

&lt;h2 id=&quot;bootstrapping-a-server&quot;&gt;Bootstrapping a Server&lt;/h2&gt;

&lt;p&gt;In Xcode, open &lt;em&gt;QuoteServer.swift&lt;/em&gt;. This is where you’re going to set up your server to bind to a port.&lt;/p&gt;

&lt;p&gt;Replace the code in this file with the following:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NIO&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QOTDError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invalidHost&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invalidPort&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QuoteServer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MultiThreadedEventLoopGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coreCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this code is doing:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You import the NIO module in this class — you won’t get far without it!&lt;/li&gt;
  &lt;li&gt;You specify a &lt;code&gt;MultiThreadedEventLoopGroup&lt;/code&gt; when you run your server, as you learned earlier. You can run as many threads as your system will allow you here — use the &lt;code&gt;System&lt;/code&gt; API for this.&lt;/li&gt;
  &lt;li&gt;You set the host and port the server will listen on. You could perform validation logic on your host and port here, if needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, you’ll add a private variable for an object that you need called a &lt;code&gt;ServerBootstrap&lt;/code&gt;. Think of this class as a helper class that sets up a server for you to serve information that you delegate. Inside your class declaration, but below &lt;code&gt;init(host:port:)&lt;/code&gt;, add this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;serverBootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ServerBootstrap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ServerBootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serverChannelOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChannelOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backlog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serverChannelOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChannelOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SocketOptionLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childChannelInitializer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BackPressureHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QuoteHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;childChannelOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChannelOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TCP_NODELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;childChannelOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChannelOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SocketOptionLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;childChannelOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChannelOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxMessagesPerRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;childChannelOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChannelOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvAllocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AdaptiveRecvByteBufferAllocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looking at the code above:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You assign the bootstrap a &lt;code&gt;MultiThreadedEventLoopGroup&lt;/code&gt; — it needs to know which run loops to utilize on your machine.&lt;/li&gt;
  &lt;li&gt;You specify you want your channel — or your communication pipe — to connect with a networking socket available on your machine and to reuse the local address on your machine (REUSEADDR).&lt;/li&gt;
  &lt;li&gt;Once communications come through the bootstrap, the channels that are the children of this bootstrap also need work to do — the &lt;code&gt;BackPressureHandler()&lt;/code&gt; basically ensures that reading a new request only happens as fast as the server is writing a response.&lt;/li&gt;
  &lt;li&gt;You then specify that you want to write your own custom class to handle incoming communication from the outside world — you’ll work on this class shortly.&lt;/li&gt;
  &lt;li&gt;Finally, you specify that your server will operate on TCP and that you won’t delay the sending of any packets of information as a response.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In the code block above, the explanation covers only the options that directly affect this tutorial. However, to learn more about the others, refer to the official &lt;a href=&quot;https://apple.github.io/swift-nio/docs/current/NIO/index.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Apple SwiftNIO Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build and run your project. You should see the same result as before. You still have a few more steps to complete your working QOTD server.&lt;/p&gt;

&lt;h2 id=&quot;handling-incoming-requests-with-channelinboundhandler&quot;&gt;Handling Incoming Requests With ChannelInboundHandler&lt;/h2&gt;

&lt;p&gt;In Xcode, open &lt;em&gt;QuoteHandler.swift&lt;/em&gt;. Notice you already have a stubbed class that conforms to &lt;code&gt;ChannelInboundHandler&lt;/code&gt;. This protocol gives you access to a series of methods that handle communication with the associated &lt;code&gt;ServerBootstrap&lt;/code&gt; you set up. You’ll implement two of these shortly.&lt;/p&gt;

&lt;p&gt;Notice the following two lines are already in the class:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InboundIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ByteBuffer&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OutboundOut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ByteBuffer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are convenience typealiases that are required to declare to conform to &lt;code&gt;ChannelInboundHandler&lt;/code&gt; so you can specify what kind of data comes into and out of your handler. You’re using &lt;code&gt;ByteBuffer&lt;/code&gt;, which stores contiguously allocated raw bytes of data. This is straight-forward to work with when you’re writing a &lt;code&gt;String&lt;/code&gt; to your response, as you’ll soon see.&lt;/p&gt;

&lt;p&gt;Inside your class and underneath your &lt;code&gt;typealias&lt;/code&gt; declarations, add the following:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;channelRegistered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ChannelHandlerContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Incoming connection registered - sending Quote of the Day&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QuoteGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sending quote&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writeAndFlush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wrapOutboundOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whenComplete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Closing connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 7&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;errorCaught&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ChannelHandlerContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a look at what you’ve just added:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;channelRegistered&lt;/code&gt; is one of the methods in &lt;code&gt;ChannelInboundHandler&lt;/code&gt;. Since you want to send a quote as a response when a connection is a requested, this method is quite convenient.&lt;/li&gt;
  &lt;li&gt;You get a random quote from &lt;code&gt;QuoteGenerator&lt;/code&gt;, a class that’s been provided for you that selects a quote from an array of them. Feel free to add any others you like.&lt;/li&gt;
  &lt;li&gt;You get a handle for your response byte buffer from the incoming channel (communication pipe).&lt;/li&gt;
  &lt;li&gt;You write your quote, which is a &lt;code&gt;string&lt;/code&gt;, to the response buffer.&lt;/li&gt;
  &lt;li&gt;Now that you’ve written to your buffer, you need to write the buffer to the channel, and then flush the communication pipe. Whatever you flush down the pipe is going to come out the other end, but this doesn’t guarantee the next line of code you write will wait for that to finish. This is where &lt;code&gt;.whenComplete&lt;/code&gt; comes in.&lt;/li&gt;
  &lt;li&gt;Inside your handler for &lt;code&gt;.whenComplete&lt;/code&gt;, you’re establishing what you want to do when the previous operation is complete. In this case, to follow the requirements of the QOTD protocol, you close the channel connection.&lt;/li&gt;
  &lt;li&gt;You also implement another method in &lt;code&gt;ChannelInboundHandler&lt;/code&gt; for handling — you guessed it — errors! Notice you actually get a handy-dandy, Swifty &lt;code&gt;Error&lt;/code&gt; type instead of something in C!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From this example, you can see that, anytime you want to handle incoming information from a client, you need to write a handler that conforms to &lt;code&gt;ChannelInboundHandler&lt;/code&gt; to do so. From here, the possibilities are endless.&lt;/p&gt;

&lt;h2 id=&quot;polishing-off-your-server-functionality&quot;&gt;Polishing Off Your Server Functionality&lt;/h2&gt;

&lt;p&gt;In Xcode, go back to &lt;code&gt;QuoteServer.swift&lt;/code&gt; and, in between your &lt;code&gt;init(host:port:)&lt;/code&gt; method and your &lt;code&gt;serverBootstrap&lt;/code&gt; var, add the following:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QOTDError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invalidHost&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QOTDError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invalidPort&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverBootstrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is now open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closeFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Breaking down what you’ve done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You don’t want to put this code inside &lt;code&gt;init(host:port:)&lt;/code&gt; method because it’s not ideal to let code that runs “forever” reside in a constructor. This makes it easy to debug issues, too.&lt;/li&gt;
  &lt;li&gt;You check for port and host using two guard statements.&lt;/li&gt;
  &lt;li&gt;With values for host and port ensured, you bind the &lt;code&gt;ServerBootstrap&lt;/code&gt; instance you create in this class to a host and port that you specify. Calling &lt;code&gt;wait()&lt;/code&gt; at the end of this means you’re waiting for the “promise” to be fulfilled. This means you’re waiting for your server to start.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Poetic as it sounds, you can’t run forever; you need a graceful way to shut down your server. In the same class, after &lt;code&gt;run()&lt;/code&gt;, add the following:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;syncShutdownGracefully&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Could not shutdown gracefully - forcing exit (&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Server closed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here’s what you’ve just added:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You try the friendly API for the &lt;code&gt;MultiThreadedEventLoopGroup&lt;/code&gt; for shutting down without causing any issues. This means it’ll wrap up any last tasks it might have to execute, and then it shuts itself down.&lt;/li&gt;
  &lt;li&gt;Of course, if that just won’t fly, you hit the power button yourself and shut down the server “un-gracefully.”&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;running-your-server&quot;&gt;Running Your Server&lt;/h2&gt;

&lt;p&gt;You’ve got yourself a server! Only one more change before we run it.&lt;/p&gt;

&lt;p&gt;In Xcode, open &lt;em&gt;main.swift&lt;/em&gt;. Delete the lone print statement at the bottom and replace it with the following:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QuoteServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1717&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s what this code does:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You create an instance of your &lt;code&gt;server&lt;/code&gt;, passing host and port.&lt;/li&gt;
  &lt;li&gt;You run your server. Note, if this call works successfully, which it should, then the application will run infinitely until you shut it down or until something breaks.&lt;/li&gt;
  &lt;li&gt;You check for any errors and, if you detect any, you make use of your handy-dandy &lt;code&gt;shutdown()&lt;/code&gt; method.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Remember you might not want to start your server from inside the constructor? The above code is a great example of this. A separate &lt;code&gt;run()&lt;/code&gt; method allows us to make changes to other properties of your server before running it.&lt;/p&gt;

&lt;p&gt;Build and run your project. You should see a line in the debugger about your server being open on port 1717.&lt;/p&gt;

&lt;p&gt;Pull your iOS client back up. Build and run it if you stopped the project. Tap the refresh button and…&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Swift-NIO-quote-281x500.png&quot; alt=&quot;&quot; width=&quot;281&quot; height=&quot;500&quot; class=&quot;bordered aligncenter size-large wp-image-189184&quot; /&gt;Voilà! A quote.
&lt;/p&gt;

&lt;p&gt;Your Swift TCP server is running! Check the logs on your Xcode project running your debugger and you should see the following output:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Incoming connection registered - sending Quote of the Day
Sending quote
Closing connection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to Go From Here?&lt;/h2&gt;

&lt;p&gt;You can download the final project using the link at the top or bottom of this tutorial. I encourage you to build on this and play with the available APIs to see what else you can do.&lt;/p&gt;

&lt;p&gt;Additionally, if you clone the &lt;a href=&quot;https://github.com/apple/swift-nio&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;SwiftNIO&lt;/a&gt; project from source, there are a couple of demos you can try right inside the project itself. If you open Xcode, you can see the executables listed in the scheme selector:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/nioOtherExecutables.jpg&quot; alt=&quot;Try running some of these executables either from Xcode or the command line.&quot; class=&quot;aligncenter bordered size-full&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more information on SwiftNIO from Apple itself, check out the full &lt;a href=&quot;https://apple.github.io/swift-nio/docs/current/NIO/index.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Apple SwiftNIO Docs&lt;/a&gt; on Apple’s GitHub.&lt;/p&gt;

&lt;p&gt;It’s an exciting time for Swift as it stretches past mobile development and into the rest of the programming world. Let us know what Swift projects you’re working on, your thoughts on the future of Swift, or leave us your favorite Quote of the Day in the forum discussion below!&lt;/p&gt;</content><author><name>David Okun</name></author><summary type="html"></summary></entry><entry><title type="html">Kitura Stencil Tutorial - How to make Websites with Swift</title><link href="http://localhost:4000/2018/04/03/kitura-stencil-making-websites-with-swift/" rel="alternate" type="text/html" title="Kitura Stencil Tutorial - How to make Websites with Swift" /><published>2018-04-03T07:00:00-05:00</published><updated>2018-04-03T07:00:00-05:00</updated><id>http://localhost:4000/2018/04/03/kitura-stencil-making-websites-with-swift</id><content type="html" xml:base="http://localhost:4000/2018/04/03/kitura-stencil-making-websites-with-swift/">&lt;p&gt;&lt;strong&gt;Editor’s Note: This is mirrored from &lt;a href=&quot;https://www.raywenderlich.com/181130/kitura-stencil-tutorial-how-to-make-websites-with-swift&quot;&gt;RayWenderlich.com&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IBM’s &lt;a href=&quot;http://kitura.io&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Kitura&lt;/a&gt; is a very popular and exciting server framework, but did you know it can be used to create web apps?&lt;/p&gt;

&lt;p&gt;In this tutorial on Kitura and &lt;a href=&quot;https://github.com/kylef/Stencil&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Stencil&lt;/a&gt;, you’ll pick up from the &lt;a href=&quot;https://www.raywenderlich.com/180721/kitura-tutorial-getting-started-with-server-side-swift&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;first part&lt;/a&gt; of this tutorial series and do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;Stencil&lt;/code&gt; dependency to your project.&lt;/li&gt;
  &lt;li&gt;Create a basic website interface.&lt;/li&gt;
  &lt;li&gt;Add a route to your API for your website.&lt;/li&gt;
  &lt;li&gt;Make your Swift code interact with HTML.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re new to Kitura, or haven’t set up CouchDB on your system yet, check out the &lt;a href=&quot;https://www.raywenderlich.com/180721/kitura-tutorial-getting-started-with-server-side-swift&quot;&gt;Server Side Swift with Kitura&lt;/a&gt; tutorial first.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Just like the previous tutorial, you’ll need the following available to you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacOS 10.12 or higher&lt;/li&gt;
  &lt;li&gt;Xcode 9.2 or newer&lt;/li&gt;
  &lt;li&gt;CouchDB&lt;/li&gt;
  &lt;li&gt;Basic familiarity with Terminal, as you’ll use the command line quite a bit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You also need to make sure CouchDB is running. If you installed CouchDB via Homebrew, open Terminal and enter this command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew services start couchdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you get a message that says &lt;code&gt;successfully started&lt;/code&gt; or &lt;code&gt;already started&lt;/code&gt;, you’re good to go!&lt;/p&gt;

&lt;h2 id=&quot;running-the-starter-project&quot;&gt;Running the Starter Project&lt;/h2&gt;

&lt;p&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Download Materials&lt;/code&gt; button at the top or bottom of this tutorial to download the starter project. This has additional files that &lt;code class=&quot;highlighter-rouge&quot;&gt;aren't&lt;/code&gt; part of the previous tutorial, so you’ll need to download this starter even if you’ve completed the prior tutorial.&lt;/p&gt;

&lt;p&gt;Open Terminal and navigate to the root directory for your project, where &lt;code class=&quot;highlighter-rouge&quot;&gt;Package.swift&lt;/code&gt; lives. Then, enter the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swift build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see a succession of logs followed by this at the end:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Compile Swift Module &lt;span class=&quot;s1&quot;&gt;'KituraWebInterface'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5 sources&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Linking ./.build/x86_64-apple-macosx10.10/debug/KituraWebInterface
swift build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Input the following command and press Enter:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.build/debug/KituraWebInterface
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see logs about starting the application, and a window may pop up asking you to allow incoming connections. If so, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Allow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, open a new Terminal window and enter the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST http://localhost:8080/acronyms &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'content-type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;short&quot;: &quot;AFK&quot;, &quot;long&quot;: &quot;Away from keyboard&quot;}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unless you’ve already added this acronym, you should get a JSON response representing the new acronym. Then enter the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://localhost:8080/acronyms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of the acronyms stored in CouchDB will be displayed. If you completed the previous tutorial, you may see more than just the &lt;code class=&quot;highlighter-rouge&quot;&gt;AFK&lt;/code&gt; acronym.&lt;/p&gt;

&lt;p&gt;Before you generate the Xcode project, you’ll add a few directories to organize your frontend app. Press &lt;code class=&quot;highlighter-rouge&quot;&gt;Control-C&lt;/code&gt; to stop the app and carry on!&lt;/p&gt;

&lt;h2 id=&quot;how-the-backend-organizes-data&quot;&gt;How the Backend Organizes Data&lt;/h2&gt;

&lt;p&gt;Whenever you made a GET request via the browser, your backend searches these available routes:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/acronyms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAcronyms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/acronyms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addAcronym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/acronyms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleteAcronym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The API matches against each route by considering the HTTP verb, which in this case is &lt;code&gt;GET&lt;/code&gt;, and the route path, which is &lt;code&gt;/acronyms&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, a user doesn’t think in HTTP terms — they just want to see what they’re interested in. This is where the user interface comes in.&lt;/p&gt;

&lt;h2 id=&quot;how-the-web-frontend-organizes-data&quot;&gt;How the Web Frontend Organizes Data&lt;/h2&gt;

&lt;p&gt;The same routers that handle your data endpoints render your user interfaces. The only difference is the route’s closure returns HTML instead of JSON.&lt;/p&gt;

&lt;p&gt;At the root of nearly any Kitura web app, you’ll see two directories: &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Views&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; directory usually contains four subdirectories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;: Contains files for determining how the UI is put together.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt;: Contains definitions for “themes” and how the content is styled.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;: Contains JavaScript files for onscreen user interaction and other under-the-hood functionality.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt;: Contains images, cat pictures and memes mostly!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; directory holds only static files, but Kitura can do more than just serve static files.&lt;/p&gt;

&lt;p&gt;Kitura uses a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;Stencil&lt;/code&gt; to render webpages and populate dynamic page content based on information passed from your Swift API. Stencil lets you create templates to display content from your APIs in a predetermined format.&lt;/p&gt;

&lt;p&gt;For example, suppose you want to add a title to a page indicating the current month. A naïve approach could look like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;The current month is December!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works only 1/12th of the time: when it’s December!&lt;/p&gt;

&lt;p&gt;What if your API could instead calculate the current month and provide a string from that calculation to use as the title? In your Swift code, you’d pass that string to the renderer, and your Stencil template might look like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;The current month is {{ currentMonth }}!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the curly braces? This is how you tell Stencil to insert information into the HTML from a context. The workflow for Stencil is essentially this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Prepare data from your API.&lt;/li&gt;
  &lt;li&gt;Set up a context: a dictionary of key/value pairs.&lt;/li&gt;
  &lt;li&gt;Populate your context with the values you want to display.&lt;/li&gt;
  &lt;li&gt;Render a template in your response, using a context.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this workflow, you never have to worry about manually updating your webpage content. Instead, it is generated dynamically from the API.&lt;/p&gt;

&lt;p&gt;Stencil templates typically have the extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.stencil&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.html.stencil&lt;/code&gt; and go in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Views&lt;/code&gt; directory. This is where Stencil looks for them when you tell it to render one.&lt;/p&gt;

&lt;h2 id=&quot;adding-the-stencil-dependency&quot;&gt;Adding the Stencil Dependency&lt;/h2&gt;

&lt;p&gt;Before you can use Stencil, you need to add it as a dependency for your project. Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Package.swift&lt;/code&gt; in Xcode, and replace its contents with the following. The only changes are below the two commented lines:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// swift-tools-version:4.1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PackageDescription&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;KituraWebInterface&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/IBM-Swift/Kitura.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upToNextMinor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.4.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/IBM-Swift/HeliumLogger.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upToNextMinor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.7.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/IBM-Swift/Kitura-CouchDB.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upToNextMinor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/IBM-Swift/Kitura-StencilTemplateEngine.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upToNextMinor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.10.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;KituraWebInterface&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kitura&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HeliumLogger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CouchDB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;KituraStencil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s what the changes do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You declare a dependency on Stencil, using its fully qualified Git URL.&lt;/li&gt;
  &lt;li&gt;You add Stencil to your target, so it will link correctly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Save and close this file.&lt;/p&gt;

&lt;p&gt;Open Terminal and navigate to the root project directory, which contains &lt;code class=&quot;highlighter-rouge&quot;&gt;Package.swift&lt;/code&gt;, and enter this command:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;swift&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will setup the new dependency on Stencil. Nice!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Stencil is not fully updated with the latest Swift changes so you’ll probably see a host of warnings. They can safely be ignored.&lt;/p&gt;

&lt;p&gt;You’re making excellent progress, but you have a little more to set up before you can get to coding.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-kitura-stencil-tutorial-project&quot;&gt;Configuring the Kitura Stencil Tutorial Project&lt;/h2&gt;

&lt;p&gt;You next need to set up some directories to keep your project organized.&lt;/p&gt;

&lt;p&gt;Still in your project’s root directory in Terminal, enter the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;Views
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Views
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;home.stencil
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;header.stencil
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;add.stencil
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ve just created the &lt;code class=&quot;highlighter-rouge&quot;&gt;Views&lt;/code&gt; directory, populated it with three template files and returned to the root directory.&lt;/p&gt;

&lt;p&gt;Next, enter the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;public
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;public
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;css
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;img
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;css/index.css
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’re simply creating the directory structure and empty files for now. You’ll populate these files shortly.&lt;/p&gt;

&lt;p&gt;Create a Swift file for handling the client route:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;Sources/KituraWebInterface/Routes/ClientRoutes.swift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, open your project directory in Finder. You can do this most easily by entering in Terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Find the file &lt;code class=&quot;highlighter-rouge&quot;&gt;kitura.jpg&lt;/code&gt; in your downloaded materials and drag it into the &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Your project directory should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-3.29.22-PM.png&quot;&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-3.29.22-PM-650x421.png&quot; alt=&quot;KituraWebInteface Project hierarchy&quot; width=&quot;650&quot; height=&quot;421&quot; class=&quot;aligncenter size-large bordered wp-image-189711&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go back to Terminal, and execute the following commands from your project’s root directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swift package generate-xcodeproj
open KituraWebInterface.xcodeproj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should now have the following window open in Xcode:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-3.58.30-PM.png&quot;&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-3.58.30-PM-650x446.png&quot; alt=&quot;KituraWebInterface Xcode first look&quot; width=&quot;650&quot; height=&quot;446&quot; class=&quot;aligncenter size-large bordered wp-image-189713&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at your File Hierarchy, and you’ll notice everything is nicely organized.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Once again, ignore any warnings about Swift 4 conversions and deprecations. These are expected with the current version of Stencil.&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;p&gt;There are only two more things you need to do before writing code. Just like in the previous tutorial, you need to set the current scheme’s executable so you can build and run the project in Xcode.&lt;/p&gt;

&lt;p&gt;First, go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Select Scheme&lt;/code&gt; dropdown and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Edit Scheme&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://koenig-media.raywenderlich.com/uploads/2017/12/Screen-Shot-2017-12-22-at-1.14.52-PM.png&quot;&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/01/Select_Edit_Scheme.png&quot; alt=&quot;Select Edit Scheme on Kitura Stencil tutorial project&quot; width=&quot;300&quot; height=&quot;396&quot; class=&quot;bordered aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the window that pops up, click on the menu next to &lt;code class=&quot;highlighter-rouge&quot;&gt;Executable&lt;/code&gt; and select &lt;code class=&quot;highlighter-rouge&quot;&gt;KituraWebInterface&lt;/code&gt;. Then, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Close&lt;/code&gt; to dismiss the pop-up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/02/Screen-Shot-2018-02-06-at-13.03.59-480x268.png&quot; alt=&quot;Set executable&quot; width=&quot;480&quot; height=&quot;268&quot; class=&quot;aligncenter size-medium bordered wp-image-186024&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, click on the drop-down to the &lt;code class=&quot;highlighter-rouge&quot;&gt;right of&lt;/code&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;Select Scheme&lt;/code&gt; dropdown, and select &lt;code class=&quot;highlighter-rouge&quot;&gt;My Mac&lt;/code&gt; (if it’s not selected already).&lt;/p&gt;

&lt;p&gt;Build and run. Then, open your web browser and go to &lt;a href=&quot;http://localhost:8080&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;http://localhost:8080&lt;/a&gt; to make sure the Kitura home page loads.&lt;/p&gt;

&lt;p&gt;Now, you’re finally ready to do some web coding!&lt;/p&gt;

&lt;h2 id=&quot;preparing-your-web-ui&quot;&gt;Preparing Your Web UI&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Xcode isn’t the best tool for editing HTML, CSS and Stencil files. You can get basic syntax coloring via &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor menu ▸ Syntax ▸ Coloring&lt;/code&gt; and choosing the file type, but this won’t recognize Stencil tags. For a better experience, you can use &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=svanimpe.stencil&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;this extension for Visual Studio Code&lt;/a&gt; written by a Ray Wenderlich team member.&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt; and replace its contents with the following:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.menu-container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'helvetica Neue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Helvetica'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;Lucida Grande&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.menu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#FFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;900px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.menu-add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.menu-add-component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.button-primary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#00B3E4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#FFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.acronym-field&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;::-webkit-input-placeholder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;:-moz-placeholder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;::-moz-placeholder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;:-ms-input-placeholder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#909&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;::-ms-input-placeholder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Arial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#909&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A complete discussion of CSS is outside the scope of this tutorial. However, this essentially sets various styles for the components you’ll be adding in HTML. You also use a framework called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FlexBox&lt;/code&gt;&lt;/a&gt; to make it easier to organize content within a web page.&lt;/p&gt;

&lt;p&gt;Next, open &lt;code class=&quot;highlighter-rouge&quot;&gt;header.stencil&lt;/code&gt; and replace its contents with the following:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'menu-container'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;TIL: Today I Learned&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/img/kitura.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This showcases a key element of Stencil template files: composition. You can define small templates to reuse in larger templates inside of loops. Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;header.stencil&lt;/code&gt; will simply be included at the top of each page, but the next example will showcase just how useful Stencil templating can be.&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;home.stencil&lt;/code&gt;, and replace its contents with the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;TIL - Kitura&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/css/index.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//fonts.googleapis.com/css?family=Open+Sans:300,400,600,700&amp;amp;amp;amp;subset=latin,latin-ext&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--1--&amp;gt;&lt;/span&gt;
    {% include &quot;header.stencil&quot; %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Existing Acronyms&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Short Form&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Long Form&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The line below the comment labeled &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;!--1--&amp;gt;&lt;/code&gt; shows how Stencil allows dynamic content to be passed into the template.&lt;/p&gt;

&lt;p&gt;To see what this actually looks like, you’ll next write a route to render the page.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-kitura-route-to-render-your-template&quot;&gt;Adding a Kitura Route to Render your Template&lt;/h2&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientRoutes.swift&lt;/code&gt; and enter the following:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KituraStencil&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Kitura&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initializeClientRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;templateEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StencilTemplateEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StaticFileServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s what that does, step by step:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;With Kitura, you have a choice between templating engines. This tutorial uses Stencil, but you can choose from others such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Mustache&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Here you set up a handler to serve the static files in the &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; directory.&lt;/li&gt;
  &lt;li&gt;This is actual definition for your route. Notice how you override the main home page path? This means this route will respond when you visit &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;http://localhost:8080&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&amp;gt;http://localhost:8080&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This is where you define the context to pass into your rendered response. The &lt;code&gt;render&lt;/code&gt; function does not accept &lt;code&gt;nil&lt;/code&gt; for a context; instead, you should always provide a context of type &lt;code&gt;[String: Any]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Notice that, because you set Stencil as the default template engine, you can leave off the default &lt;code class=&quot;highlighter-rouge&quot;&gt;.stencil&lt;/code&gt; extension when referring to templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now to add a router to render the response.&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Application.swift&lt;/code&gt; and replace &lt;code&gt;finalizeRoutes(with:)&lt;/code&gt; with this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finalizeRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;initializeAcronymRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;initializeClientRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Acronym routes created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, whenever your application registers its routers with the main router, it will include this new router for your rendering response.&lt;/p&gt;

&lt;p&gt;Build and run, open a web browser and visit &lt;a href=&quot;http://localhost:8080&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-4.39.38-PM.png&quot;&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-4.39.38-PM-650x430.png&quot; alt=&quot;First served page&quot; width=&quot;650&quot; height=&quot;430&quot; class=&quot;aligncenter size-large bordered wp-image-189715&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’ve just rendered your first HTML template using Swift!&lt;/p&gt;

&lt;p&gt;Next, you need to make your page display some acronyms.&lt;/p&gt;

&lt;h2 id=&quot;passing-a-context-to-stencil&quot;&gt;Passing a Context to Stencil&lt;/h2&gt;

&lt;p&gt;It would be great if the acronyms from your database were displayed on the webpage. To do that, you first need to place them in a context.&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientRoutes.swift&lt;/code&gt; file, and replace the &lt;code&gt;get&lt;/code&gt; route with this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Acronym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Persistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acronyms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;acronyms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acronyms&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contextAcronyms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acronym&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acronyms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acronym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acronym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acronym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;contextAcronyms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;acronyms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextAcronyms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s what this does:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, you call &lt;code&gt;Persistence.getAll&lt;/code&gt; to retrieve all of the acronyms.&lt;/li&gt;
  &lt;li&gt;You’ll soon add support for creating an &lt;code&gt;Acronym&lt;/code&gt;, but for now, you only use those that already have an &lt;code&gt;id&lt;/code&gt; within the database.&lt;/li&gt;
  &lt;li&gt;In order for Stencil to read properties from your context, you must serialize them. Stencil doesn’t yet support automatic serialization through &lt;code&gt;Codable&lt;/code&gt; so you do it the old fashioned way.&lt;/li&gt;
  &lt;li&gt;Finally, you set the &lt;code&gt;contextAcronyms&lt;/code&gt; using the key &lt;code&gt;&quot;acronyms&quot;&lt;/code&gt;. Later on, you’ll use this same key to access this array in HTML.&amp;lt;/code&amp;gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next, you must update &lt;code class=&quot;highlighter-rouge&quot;&gt;home.stencil&lt;/code&gt; to use the new array you passed via the context. Replace the contents of &lt;code&gt;body&lt;/code&gt; within &lt;code class=&quot;highlighter-rouge&quot;&gt;home.stencil&lt;/code&gt; with the following:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  {% include &quot;header.stencil&quot; %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Existing Acronyms&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Short Form&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Long Form&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--1--&amp;gt;&lt;/span&gt;
  {% for acronym in acronyms %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--2--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;{{ acronym.short }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--3--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ acronym.long }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s the play by play:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Here, you use the context values passed into Stencil: you loop through all available acronyms and create template HTML for each.&lt;/li&gt;
  &lt;li&gt;In the same manner, you display the short version for each acronym.&lt;/li&gt;
  &lt;li&gt;Finally, you display the long version.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Build and run, and navigate your web browser to &lt;a href=&quot;http://localhost:8080&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Depending on how many acronyms you have stored in your database, your webpage should look something like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-4.57.07-PM.png&quot;&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-4.57.07-PM-650x430.png&quot; alt=&quot;Display acronyms&quot; width=&quot;650&quot; height=&quot;430&quot; class=&quot;aligncenter size-large bordered wp-image-189717&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a final touch, you’ll add a UI so you can add and remove acronyms through the web app.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-template-for-creating-acronyms&quot;&gt;Adding a Template for Creating Acronyms&lt;/h2&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;add.stencil&lt;/code&gt; and enter the following:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Add New Acronym&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Acronym&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shortField&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;acronym-field&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;short&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;e.g. BRB&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Long Form&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;longField&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;acronym-field&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;long&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;e.g. Be Right Back&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button-primary&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Save Acronym&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submitForm()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll use this HTML template at the top of the page to allow the user to create a new &lt;code&gt;Acronym&lt;/code&gt;. In particular, look at the line for &lt;code&gt;button-primary&lt;/code&gt;, which has &lt;code&gt;onClick&lt;/code&gt; set to &lt;code&gt;submitForm&lt;/code&gt;. You need to create a JavaScript function for this. At the end of the file, add the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;submitForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shortField&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;longField&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Both fields must contain text!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/acronyms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s what this does:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Here you access form fields and prepare to populate your JSON request to your API.&lt;/li&gt;
  &lt;li&gt;Just as you placed object validation on the backend, it’s good practice to duplicate your validation on the front-end.&lt;/li&gt;
  &lt;li&gt;Since your API is using Codable Routing, you need to set your content header appropriately.&lt;/li&gt;
  &lt;li&gt;You send your JSON with this handy &lt;code&gt;stringify&lt;/code&gt; function to serialize your data.&lt;/li&gt;
  &lt;li&gt;When the request receives a response, you reload the page to update what you see in your list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you’ll add this template to the home page.&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;home.stencil&lt;/code&gt; and find the line that has&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include &quot;header.stencil&quot; %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Add the following right after that line:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include &quot;add.stencil&quot; %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will include everything you wrote in &lt;code class=&quot;highlighter-rouge&quot;&gt;add.stencil&lt;/code&gt;. This is a great way to separate out reusable components.&lt;/p&gt;

&lt;p&gt;Reload your webpage, it should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-4.57.29-PM.png&quot;&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-4.57.29-PM-650x430.png&quot; alt=&quot;Add acronym&quot; width=&quot;650&quot; height=&quot;430&quot; class=&quot;aligncenter size-large bordered wp-image-189718&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try using your fancy new UI to add a couple of new acronyms. After you click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Save Acronym&lt;/code&gt; button, you’ll either see a refreshed page, or an alert if you didn’t enter text for both fields!&lt;/p&gt;

&lt;p&gt;You’re almost at the finish line! You just need a way to delete acronyms.&lt;/p&gt;

&lt;h2 id=&quot;adding-delete-functionality&quot;&gt;Adding Delete Functionality&lt;/h2&gt;

&lt;p&gt;This is another place to take advantage of your templating abilities. Rather than create a UI where you enter an ID and then click delete for that acronym, wouldn’t it be nice to have a delete button next to each acronym?&lt;/p&gt;

&lt;p&gt;Still in &lt;code class=&quot;highlighter-rouge&quot;&gt;home.stencil&lt;/code&gt; file, replace everything inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; tag with this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  {% include &quot;header.stencil&quot; %}
  {% include &quot;add.stencil&quot; %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Existing Acronyms&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Short Form&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Long Form&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--1--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Delete Acronym&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  {% for acronym in acronyms %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;{{ acronym.short }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ acronym.long }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--2--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-add-component&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ acronym.id }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button-primary one-line&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Delete&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deleteAcronym(this.id)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s what you added:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a header to reflect your options below.&lt;/li&gt;
  &lt;li&gt;Add a button to delete the acronym on a given line. Notice that the &lt;code&gt;id&lt;/code&gt; parameter makes use of the acronym’s &lt;code&gt;id&lt;/code&gt;. This will be important shortly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below all of your HTML, you need to add one more JavaScript function. Just before the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag, add the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deleteAcronym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acronymID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;delete&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/acronyms/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acronymID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s how this works:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The button’s ID is used as a parameter to tell your function which acronym you want to delete.&lt;/li&gt;
  &lt;li&gt;You use this parameter to create the correct URL.&lt;/li&gt;
  &lt;li&gt;When the request completes, you refresh the page to update the UI.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reload the page again. It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-5.09.02-PM.png&quot;&gt;&lt;img src=&quot;https://koenig-media.raywenderlich.com/uploads/2018/03/Screen-Shot-2018-03-22-at-5.09.02-PM-650x430.png&quot; alt=&quot;Final project screen&quot; width=&quot;650&quot; height=&quot;430&quot; class=&quot;aligncenter size-large bordered wp-image-189720&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try deleting the acronyms you’ve already typed. After you click the delete button, the page should update and show that you did in fact delete the acronym!&lt;/p&gt;

&lt;p&gt;You’ve just built a fully functional web application with a backend written in Swift! Pretty neat.&lt;/p&gt;

&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to Go From Here?&lt;/h2&gt;

&lt;p&gt;You can download the completed version of the project using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Download Materials&lt;/code&gt; button at the top or bottom of this tutorial. Because projects built using the Swift Package Manager (SPM) treat the &lt;code class=&quot;highlighter-rouge&quot;&gt;.xcodeproj&lt;/code&gt; as disposable, it is not included. Run &lt;code class=&quot;highlighter-rouge&quot;&gt;swift package generate-xcodeproj&lt;/code&gt; again to download the dependencies and generate an Xcode project.&lt;/p&gt;

&lt;p&gt;Web templating is fun when you need to interface with your Swift API right away. I hope that Stencil helps you get on track for whatever it is you want to create, whether it’s a blog, a photo library or anything else you have in mind.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, please join the forum discussion below!&lt;/p&gt;</content><author><name>David Okun</name></author><summary type="html"></summary></entry></feed>